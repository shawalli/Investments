#!/usr/bin/python2.7

import os
import sys
import argparse
from collections import OrderedDict
import yaml

CONFIG_DEFAULTS_FILENAME = "default_settings.yaml"
CONFIG_FILENAME = "settings.yaml"

class ConfigurationError(Exception): pass

# solution from http://stackoverflow.com/a/21912744
class OrderedLoader(yaml.Loader): pass

def yaml_ordered_load(file_handle):
    def construct_mapping(loader, node):
        loader.flatten_mapping(node)
        return OrderedDict(loader.construct_pairs(node))
    OrderedLoader.add_constructor(
        yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG,
        construct_mapping)
    return yaml.load(file_handle, OrderedLoader)
yaml.ordered_load = yaml_ordered_load

def yaml_ordered_dump(file_handle, yaml_dict):
    SECTION_LEVEL = 0
    SETTING_LEVEL = 1
    ATTR_LEVEL = 2

    for section, settings in yaml_dict.items():
        file_handle.write('%s%s:\n' % ('  '*SECTION_LEVEL, section))
        for setting_name, setting_value in settings.items():
            file_handle.write('%s%s: %s\n' % ('  '*SETTING_LEVEL, setting_name, str(setting_value)))
yaml.ordered_dump = yaml_ordered_dump

def rebase():
    basepath = os.getcwd()
    while True:
        basepath, parent_dir = os.path.split(basepath)
        if basepath == "/":
            raise Exception("Could not find root app directory in path!")
        
        if parent_dir == "InvestmentsApp":
            break

        os.chdir('..')

def parse_args():
    desc = ("Configure various app settings for Investments.app. If creating "
            "a new configuration file, no flags are needed.")
    parser = argparse.ArgumentParser(description=desc)

    flags = parser.add_mutually_exclusive_group()
    flags.add_argument("-c", "--check", default=False, action="store_true",
        help=("Check to see if the configuration file already exists "
              "for Investments.app."))
    flags.add_argument("-f", "--force", default=False, action="store_true",
        help=("If Investments.app configuration file already exists, "
              "overwrite it with new settings."))
    flags.add_argument("-u", "--update", default=False, action="store_true",
        help="If Investments.app configuration file exists, update settings.")

    return parser.parse_args()

def process_check_flag(check_flag):
    if check_flag is True:
        if os.path.exists(CONFIG_FILENAME) is True:
            sys.exit(1)
        else:
            sys.exit(0)

def process_force_flag(force_flag):
    if os.path.exists(CONFIG_FILENAME) is True:
        if force_flag is True:
            os.remove(CONFIG_FILENAME)
        else:
            raise OSError("Configuration file \'%s\' already exists!")

def process_update_flag(update_flag):
    pass

def load_defaults():
    with open(CONFIG_DEFAULTS_FILENAME, 'r') as defaults_yaml:
        cfg = yaml.ordered_load(defaults_yaml)
    return cfg

def construct_cfg(defaults_dict, current_dict=None):
    merged_dict = OrderedDict()
    if current_dict is None:
        current_dict = dict()

    sections = set(defaults_dict.keys()) | set(current_dict.keys())

    for section in sections:
        current_settings = current_dict.get(section, dict())
        default_settings = defaults_dict.get(section, dict())

        merged_dict[section] = OrderedDict()
        for name, setting in default_settings.items():
            # default settings only and defaults/current settings
            if current_settings.has_key(name) is True:
                # current settings has a value for key
                if setting.has_key('choices') is True:
                    # current setting came from a list in default settings
                    try:
                        # convert value to index from choices list
                        default_setting = setting['choices'].index(current_settings[name]) + 1
                    except ValueError:
                        # For some reason, the current setting wasn't in the list from
                        # default settings. Fall back to default
                        default_setting = setting.get('default', None)
                else:
                    # Not from choices list, so just set current value as default
                    default_setting = current_settings[name]
            else:
                default_setting = setting.get('default', None)

            choices = setting.get('choices', None)
            prompt = setting.get('help', name.capitalize())
            setting_type = setting.get('type', None)
            value = ask_setting(prompt=prompt,
                                  choices=choices,
                                  default=default_setting,
                                  setting_type=setting_type)
            merged_dict[section][name] = value

        current_only_settings = set(current_settings.keys()) - set(default_settings.keys())
        for name in current_only_settings:
            # current setting only
            value = ask_setting(prompt=name,
                                default=current_settings[name])
            merged_dict[section][name] = value

    return merged_dict

def ask_choice(prompt, choices, default=None):
    prompt = [prompt + ':']
    for idx, choice in enumerate(choices, start=1):
        if default == idx:
            prompt.append(" *%-2d %s" % (idx, choice))
        else:
            prompt.append("  %-2d %s" % (idx, choice))
    prompt.append('')
    prompt = '\n'.join(prompt)
    val = None
    while val is None:
        input_val = raw_input(prompt)
        if input_val == '':
            if default is not None:
                val = choices[default - 1]
            else:
                print('Invalid choice!\n')
        else:
            int_val = int(input_val)
            if int_val < 1 or int_val > len(choices):
                print('Invalid choice!\n')
            else:
                val = choices[int_val - 1]

    return val

def get_conversion_func(conversion_type):
    def to_str(s):
        return str(s)
    def to_int(s):
        try:
            i = int(s)
        except ValueError:
            try:
                i = int(s, 10)
            except ValueError:
                i = int(s, 16)
        return i
    def to_bool(s):
        try:
            # first try to convert int and solve(0 = False, 1+ = True)
            i = to_int(s)
            b = bool(i)
        except ValueError:
            # at this point, the only thing it could be is a boolean string
            b = bool(s)
        return b

    if conversion_type == 'str':
        return to_str
    elif conversion_type == 'int':
        return to_int
    elif conversion_type == 'bool':
        return to_bool
    elif conversion_type is None:
        return lambda x: x
    else:
        raise TypeError("Conversion type \'%s\' not supported" % conversion_type)

def ask_setting(prompt, choices=None, default=None, setting_type=None):
    conversion_func = get_conversion_func(setting_type)
    if choices is not None:
        val = ask_choice(prompt, choices, default)
    else:
        if default is not None:
            prompt += " [%s]:" % default
        else:
            prompt += ":"

        val = None
        while val is None:
            input_val = raw_input(prompt)
            if input_val == '':
                if default is not None:
                    val = default
                else:
                    print('No value entered!\n')
            else:
                val = input_val

        val = conversion_func(val)
    print('')
    return val

def main():
    exitValue = 0

    # Ensure we are in the InvestmentsApp root directory
    rebase()

    args = parse_args()

    process_check_flag(args.check)

    # process_force_flag(args.force)

    # process_update_flag(args.update)

    defaults = load_defaults()

    if os.path.exists(CONFIG_FILENAME):
        with open(CONFIG_FILENAME, 'r') as current_yaml:
            currents_config = yaml.ordered_load(current_yaml)
    else:
        currents_config = None

    cfg = construct_cfg(defaults, currents_config)
    with open(CONFIG_FILENAME, 'w') as current_yaml:
        yaml.ordered_dump(current_yaml, cfg)

if __name__ == "__main__":
    main()
